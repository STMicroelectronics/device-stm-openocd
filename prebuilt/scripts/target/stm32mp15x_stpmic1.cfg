# script for stm32mp15x family with companion PMIC STPMIC1

source [find target/stm32mp15x.cfg]

$_CHIPNAME.cpu0 configure -event reset-halt { catch { if { [eval chip_revision] != 0x2000 } { pmic_init } } }

# Wait for expression to be true with a timeout of 200ms
proc wait_state {condition} {
	for {set t 0} {$t < 200} {incr t} {
		if {[uplevel 1 $condition] == 0} {
			return
		}
		sleep 1
	}
	return -code 1 "Timed out"
}

# Set mask_reset bits in PMIC to keep VDD and VDD_CORE on at next reset event
# Mask_reset for SD-card power "must" not be enabled to guarantee boot from SD
# This procedure requires Secure memory access
proc pmic_init {} {
	global _CHIPNAME

	set RCC_BASE   0x50000000
	set GPIO_BASE  0x54004000
	set I2C_BASE   0x5c002000

	# i2c @ 100kHz, rise 100ns, fall 100ns
	# timing depending from HSIDIV[1:0] = {0 1 2 3} means hsi_ker_ck = {64 32 16 8} MHz
	set I2C_TIMING {0x10b17db5 0x00b07cb4 0x00503d58 0x00201d2b}

	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x00c] 1; # set HSION = 1 (enable HSI)
	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x0c0] 2; # set I2C46SRC[2:0] = 2 (hsi_ker_ck)

	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x208] 4; # set I2C4EN = 1
	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x188] 4; # assert I2C4RST
	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x18c] 4; # deassert I2C4RST

	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x210] 1; # set GPIOZEN = 1 (enable GPIOZ)
	$_CHIPNAME.axi_mmw [expr $GPIO_BASE + 0x00] 0x00000a00 0x00000f00; # GPIOZ4/5 AF
	$_CHIPNAME.axi_mmw [expr $GPIO_BASE + 0x04] 0x00000030 0x00000000; # GPIOZ4/5 open drain
	$_CHIPNAME.axi_mmw [expr $GPIO_BASE + 0x08] 0x00000000 0x00000f00; # GPIOZ4/5 low speed
	$_CHIPNAME.axi_mmw [expr $GPIO_BASE + 0x0c] 0x00000000 0x00000f00; # GPIOZ4/5 no pull-up/down
	$_CHIPNAME.axi_mmw [expr $GPIO_BASE + 0x20] 0x00660000 0x00ff0000; # GPIOZ4/5 AF6

	set hsidiv [expr [$_CHIPNAME.axi_mrw [expr $RCC_BASE + 0x018]] & 0x3]
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x010] [lindex $I2C_TIMING $hsidiv]
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x000] 1; # set PE = 1
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x004] 0x02023066
	wait_state {expr {([$_CHIPNAME.axi_mrw [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x028] 0x18
	wait_state {expr {([$_CHIPNAME.axi_mrw [expr $I2C_BASE + 0x018]] & 0x00000002) == 0}}; # wait TXIS
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x028] 0x05
	wait_state {expr {([$_CHIPNAME.axi_mrw [expr $I2C_BASE + 0x018]] & 0x00000020) == 0}}; # wait STOPF
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x01c] 0x00000020
	$_CHIPNAME.axi mww [expr $I2C_BASE + 0x004] 0x01ff14fe

#	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x20c] 4; # set I2C4EN = 0 (disable I2C4)
#	$_CHIPNAME.axi mww [expr $RCC_BASE + 0x214] 1; # set GPIOZEN = 0 (disable GPIOZ)
}

# Wrap around init/shutdown. Typing CTRL-C will also invoke shutdown
rename init _init
proc init {} {
	_init
	if { [eval chip_revision] != 0x2000 } {
		# Use debug flag to signal to SPL and TF-A that we are in a debug
		# session. This will force them (at next reboot) to program the PMIC
		# for keeping powered-on the debug unit during reset.
		set_debugflag_in_backup_reg
	}
}

rename shutdown _shutdown
proc shutdown {} {
	catch { clear_debugflag_in_backup_reg }
	_shutdown
}

reset_config srst_pulls_trst
