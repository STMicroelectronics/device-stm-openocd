# script for stm32mp15x family

#
# stm32 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32mp15x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 32kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x8000
}

# jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0436
      # Section 66.8.3
      set _CPUTAPID 0x6ba00477
   } {
      set _CPUTAPID 0x6ba02477
   }
}

# Chip Level TAP Controller, only in jtag mode
if { [info exists CLCTAPID] } {
	set _CLCTAPID $CLCTAPID
} else {
	set _CLCTAPID 0x06500041
}

swj_newdap $_CHIPNAME tap -expected-id $_CPUTAPID -irlen 4 -ircapture 0x01 -irmask 0x0f
if { [using_jtag] } {
	swj_newdap $_CHIPNAME.clc tap -expected-id $_CLCTAPID -irlen 5
}
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.tap -ignore-syspwrupack

# in smp mode, if one core is halted the event 'halted' get fired for the selected core only.
# so the halt event remains unacknowledged for other cores.
proc cti_prepare_restart_all {} {
	global _CHIPNAME

	cti_prepare_restart cti0
	if { [$_CHIPNAME.cpu1 was_examined] } {
		cti_prepare_restart cti1
	}
	if { [$_CHIPNAME.cpu2 was_examined] } {
		cti_prepare_restart cti2
	}
}

proc cti_prepare_restart {cti} {
	global _CHIPNAME

	# Acknowlodge EDBGRQ at TRIGOUT0
	$_CHIPNAME.$cti write INACK 0x01
	$_CHIPNAME.$cti write INACK 0x00
}

proc cti_start {} {
	global _CHIPNAME

	# Configure CTIs to halt the other cores
	# TRIGIN0 (DBGTRIGGER) and TRIGOUT0 (EDBGRQ) at CTM_CHANNEL_0
	$_CHIPNAME.cti0 write INEN0 0x1
	$_CHIPNAME.cti0 write OUTEN0 0x1
	$_CHIPNAME.cpu0 configure -event halted { cti_prepare_restart_all }
	$_CHIPNAME.cti0 enable on

	if { [$_CHIPNAME.cpu1 was_examined] } {
		$_CHIPNAME.cti1 write INEN0 0x1
		$_CHIPNAME.cti1 write OUTEN0 0x1
		$_CHIPNAME.cpu1 configure -event halted { cti_prepare_restart_all }
		$_CHIPNAME.cti1 enable on
	}

	# Cortex-M4 CTI configuration (enable CM4.CTI and join same CTM channels)
	if { [$_CHIPNAME.cpu2 was_examined] } {
		$_CHIPNAME.cti2 write INEN0 0x1
		$_CHIPNAME.cti2 write OUTEN0 0x1
		$_CHIPNAME.cpu2 configure -event halted { cti_prepare_restart_all }
		$_CHIPNAME.cti2 enable on
	}
}

proc cti_stop {} {
	global _CHIPNAME

	$_CHIPNAME.cti0 enable off
	if { [$_CHIPNAME.cpu1 was_examined] } {
		$_CHIPNAME.cti1 enable off
	}
	if { [$_CHIPNAME.cpu2 curstate] ne "examine deferred" } {
		$_CHIPNAME.cti2 enable off
	}
}

cti create $_CHIPNAME.cti  -dap $_CHIPNAME.dap -ap-num 1 -ctibase 0xE0094000
cti create $_CHIPNAME.cti0 -dap $_CHIPNAME.dap -ap-num 1 -ctibase 0xE00D8000
cti create $_CHIPNAME.cti1 -dap $_CHIPNAME.dap -ap-num 1 -ctibase 0xE00D9000
cti create $_CHIPNAME.cti2 -dap $_CHIPNAME.dap -ap-num 2 -ctibase 0xE0043000

target create $_CHIPNAME.cpu0 cortex_a -dap $_CHIPNAME.dap -coreid 0 -dbgbase 0xE00D0000
target create $_CHIPNAME.cpu1 cortex_a -dap $_CHIPNAME.dap -coreid 1 -dbgbase 0xE00D2000 -defer-examine
target create $_CHIPNAME.axi mem_ap -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.ap1 mem_ap -dap $_CHIPNAME.dap -ap-num 1

target smp $_CHIPNAME.cpu0 $_CHIPNAME.cpu1
$_CHIPNAME.cpu0 cortex_a maskisr on
$_CHIPNAME.cpu1 cortex_a maskisr on
$_CHIPNAME.cpu0 cortex_a dacrfixup on
$_CHIPNAME.cpu1 cortex_a dacrfixup on

# Only in ENG_MODE the CM4 is available at reset
if { [info exists ENG_MODE] } {
	target create $_CHIPNAME.cpu2 cortex_m -dap $_CHIPNAME.dap
	target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2
} else {
	target create $_CHIPNAME.cpu2 cortex_m -dap $_CHIPNAME.dap -defer-examine
	target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2 -defer-examine
}

#$_CHIPNAME.cpu0 configure -work-area-phys 0x2ffc0000 -work-area-virt 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#$_CHIPNAME.cpu1 configure -work-area-phys 0x2ffc0000 -work-area-virt 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#$_CHIPNAME.cpu2 configure -work-area-phys 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0

if { [info exists GDB_PORT] } {
	set _GDB_PORT $GDB_PORT
} else {
	set _GDB_PORT [ocd_gdb_port]
}

# The two CA7 will require one or two gdb ports, depending on smp enabled or not
# Set a fixed gdb port of CM4
$_CHIPNAME.cpu0 configure -gdb-port [expr $_GDB_PORT + 1]
$_CHIPNAME.cpu1 configure -gdb-port [expr $_GDB_PORT + 2]
$_CHIPNAME.cpu2 configure -gdb-port [expr $_GDB_PORT + 0]

$_CHIPNAME.cpu0 configure -event reset-assert-pre { pre_reset_halt_cpu0 }
$_CHIPNAME.cpu0 configure -event reset-deassert-post { delayed_reset_halt_cpu0 }

proc pre_reset_halt_cpu0 {} {
	global _CHIPNAME
	global ENG_MODE
	global arp_reset_mode
	global workaround_revision_0x2000

	catch { unset workaround_revision_0x2000 }
	if { ([eval chip_revision] == 0x2000) && ![info exists ENG_MODE] && ([string compare "$arp_reset_mode" "run"] != 0) } {
		set workaround_revision_0x2000 1
		set_debugflag_in_backup_reg
	}
	arp_reset_default_handler pre $_CHIPNAME.cpu0
}

# In production mode, reset-halt stops in bootrom when only
# cpu0 can be attached due to security mode.
# Set a breakpoint to stop cpu0 when cpu1 can be attached too.
proc delayed_reset_halt_cpu0 { } {
	global _CHIPNAME
	global ENG_MODE
	global arp_reset_mode
	global workaround_revision_0x2000

	if { [info exists ENG_MODE] || ([string compare "$arp_reset_mode" "run"] == 0) } {
		# default reset-deassert-post handler
		arp_reset_default_handler post $_CHIPNAME.cpu0
	} elseif { [info exists workaround_revision_0x2000] } {
		unset workaround_revision_0x2000
		cortex_a smp_off
		$_CHIPNAME.cpu0 arp_examine
		catch { $_CHIPNAME.cpu0 arp_waitstate halted 500 }
		halt
		cortex_a smp_on
		catch { clear_debugflag_in_backup_reg }

		# incr PC if insn is "BKPT 5"
		set pc [ocd_reg pc]
		regsub {pc[^:]*: } $pc "" pc
		if { ([expr $pc & 3] == 0) && ([mrw $pc] == 0xe1200075) } {
			reg pc [expr $pc + 4]
		}
		arp_reset_halt_default_handler $_CHIPNAME.cpu0
	} else {
		# only in production mode for "reset halt" or "reset init"
		cortex_a smp_off
		targets $_CHIPNAME.cpu0
		arp_reset_default_handler post $_CHIPNAME.cpu0

		set rom_halt_pc 0x000079ac
		if { [eval chip_revision] == 0x1000 } {
			set rom_halt_pc 0x0000688c
		}

		poll on
		catch { $_CHIPNAME.cpu0 arp_waitstate halted 1000 }
		bp $rom_halt_pc 2 hw
		resume
		catch { $_CHIPNAME.cpu0 arp_waitstate halted 1000 }
		rbp $rom_halt_pc

		cortex_a smp_on
	}
}

targets $_CHIPNAME.cpu0

# interface does not work while srst is asserted
# this is target specific, valid for every board
reset_config srst_gates_jtag

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 5000
}
adapter_khz $_CLOCK_FREQ
adapter_nsrst_assert_width 200
adapter_nsrst_delay 200

$_CHIPNAME.ap1 configure -event examine-end {
	global _CHIPNAME

	# only on dual-cores chips, examine the second core
	$_CHIPNAME.ap1 mem2array cpu1_prsr 32 0xE00D2314 1
	if {$cpu1_prsr(0) & 1} {
		$_CHIPNAME.cpu1 invoke-event examine-start
		set err [catch "$_CHIPNAME.cpu1 arp_examine"]
		if { $err } {
			$_CHIPNAME.cpu1 invoke-event examine-fail
		} else {
			$_CHIPNAME.cpu1 invoke-event examine-end
		}
	}
}

$_CHIPNAME.cpu1 configure -event examine-end {
	global _CHIPNAME

	if {[$_CHIPNAME.cpu1 was_examined] && [$_CHIPNAME.cpu0 curstate] eq "halted"} {
		halt
	}
}

set clients_num 0
proc clients_inc {} {
	global clients_num

	incr clients_num
}

proc clients_dec_and_shutdown {} {
	global clients_num

	incr clients_num -1
	if { $clients_num <= 0 } { shutdown }
}

$_CHIPNAME.cpu0 configure -event gdb-attach { clients_inc; halt }
$_CHIPNAME.cpu1 configure -event gdb-attach { clients_inc; halt }

$_CHIPNAME.cpu2 configure -event gdb-attach {
	global _CHIPNAME
	global ENG_MODE

	clients_inc

	# Only in ENG_MODE the CM4 is available at reset
	if { ! [info exists ENG_MODE] } {
		$_CHIPNAME.cpu2 arp_examine
		$_CHIPNAME.cpu2 arp_poll
		$_CHIPNAME.ap2  arp_examine
		$_CHIPNAME.ap2  arp_poll
	}
	halt
}

$_CHIPNAME.cpu0 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }
$_CHIPNAME.cpu1 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }
$_CHIPNAME.cpu2 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }

proc chip_revision {} {
	global _CHIPNAME

	# read DBGMCU_IDC
	$_CHIPNAME.ap1 mem2array v 32 0xe0081000 1
	return [expr $v(0) >> 16]
}

proc $_CHIPNAME.axi_mrw {reg} {
	global _CHIPNAME

	set value ""
	$_CHIPNAME.axi mem2array value 32 $reg 1
	return $value(0)
}

proc $_CHIPNAME.axi_mmw {reg setbits clearbits} {
	global _CHIPNAME

	set old [$_CHIPNAME.axi_mrw $reg]
	set new [expr ($old & ~$clearbits) | $setbits]
	$_CHIPNAME.axi mww $reg $new
}

# Backup registers are battery powered and keep the value both across power
# cycles and reset pulses on NRST_CORE pin.
# Bit 16 in TAMP_BACKUP_REGISTER(20) is used as special signal between the
# debugger and the application across a reset.
proc set_debugflag_in_backup_reg {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	set old_csw [lindex [ocd_$_CHIPNAME.dap apcsw] 4]
	axi_secure_access
	catch { $_CHIPNAME.axi_mmw 0x50001000 0x00000100 0x00000000 }
	catch { $_CHIPNAME.axi_mmw 0x50000208 0x00000100 0x00000000 }
	axi_non_secure_access
	$_CHIPNAME.axi_mmw 0x5c00a150 0x00010000 0x00000000
	$_CHIPNAME.dap apcsw $old_csw
}

proc clear_debugflag_in_backup_reg {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	set old_csw [lindex [ocd_$_CHIPNAME.dap apcsw] 4]
	axi_non_secure_access
	$_CHIPNAME.axi_mmw 0x5c00a150 0x00000000 0x00010000
	$_CHIPNAME.dap apcsw $old_csw
}

proc axi_secure_access {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	$_CHIPNAME.dap apcsw 0x10006000
}

proc axi_non_secure_access {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	$_CHIPNAME.dap apcsw 0x30006000
}

axi_secure_access

rename init __init
proc init {} {
	__init
	if { [eval chip_revision] == 0x2000 } {
		# srst pulse causes a reset of the debug port
		reset_config srst_pulls_trst
	}
}
